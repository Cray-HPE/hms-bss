# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Destructive Tavern test cases for BSS endpoint history API
# Author: Ryan Sjostrand
# Service: Boot Script Service

---
test_name: bssAPIendpointHistory

stages:
- name: Remove any test HSM EthernetInterfaces for the CT Test container if they exist
  request:
    url: "{hsm_base_url}/hsm/v2/Inventory/EthernetInterfaces/0efffffffffe"
    method: DELETE
    verify: !bool "{verify}"

- name: Query HSM State Components for a compute node
  request:
    url: "{hsm_base_url}/hsm/v2/State/Components?Type=Node&Role=Compute"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    save:
        json:
          node_xname: Components[0].ID

- name: Create or Update Bootparameter for compute node
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: PUT
    verify: !bool "{verify}"
    json:
      hosts:
      - "{node_xname}"
      params: console=tty0
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
  response:
    status_code: 200

# Please note that this stage is a hack to retrieve and save the IP address of this container into
# a variable. Perhaps a plugin might be better here.
- name: Retrieve test container IP address
  request:
    # The endpoint that we hit doesn't really matter, just
    url: "{bss_base_url}/boot/v1/service/status"
    method: GET
    verify: !bool "{verify}"
  response:
    save:
      $ext:
        function: bss_test_utils:save_ip_address_of_test_container

- name: Create test HSM EthernetInterfaces for the CT Test container
  request:
    url: "{hsm_base_url}/hsm/v2/Inventory/EthernetInterfaces"
    method: POST
    verify: !bool "{verify}"
    json:
      MACAddress: "0e:ff:ff:ff:ff:fe"
      ComponentID: "{node_xname}"
      Description: "Created by BSS CT Tavern Tests"
      IPAddresses:
        - IPAddress: "{test_container_ip_address}"

- name: Perform POST against /hosts to force a sync with HSM
  request:
    url: "{bss_base_url}/boot/v1/hosts"
    method: POST
    verify: !bool "{verify}"
  response:
    status_code: 204

- name: Query bootscript by xname
  request:
    url: "{bss_base_url}/boot/v1/bootscript"
    method: GET
    verify: !bool "{verify}"
    params:
      name: "{node_xname}"
  response:
    status_code: 200
    # Note the content of the response is not being tested, as that is done in other tests

- name: Query endpoint-history with node xname, and verify state
  request:
    url: "{bss_base_url}/boot/v1/endpoint-history"
    method: GET
    verify: !bool "{verify}"
    params:
      name: "{node_xname}"
      endpoint: bootscript
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          matching: all
          range:
            min: 1
            max: 1
          sequence:
          - type: map
            mapping:
              name:
                type: str
                enum:
                - "{node_xname}"
              endpoint:
                type: str
                enum:
                - bootscript
              last_epoch:
                type: int
                range:
                  min: 0 # If the epoch time is 0, then that means the endpoint wasn't really queried.

# Verify that there are no matches when using a bad endpoint.
- name: Query endpoint-history with bad endpoint
  request:
    url: "{bss_base_url}/boot/v1/endpoint-history"
    method: GET
    verify: !bool "{verify}"
    params:
      name: "{node_xname}"
      endpoint: bootscript-bad
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          matching: all
          range:
            min: 0
            max: 0
          sequence:
          - type: map
            mapping:
              name:
                type: str
              endpoint:
                type: str
              last_epoch:
                type: int

- name: Query for cloud-init user-data for the node
  request:
    url: "{bss_base_url}/user-data"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    # Note the content of the response is not being tested, as that is done in other tests

- name: Query endpoint-history with node xname, and verify state
  request:
    url: "{bss_base_url}/boot/v1/endpoint-history"
    method: GET
    verify: !bool "{verify}"
    params:
      name: "{node_xname}"
      endpoint: user-data
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          matching: all
          range:
            min: 1
            max: 1
          sequence:
          - type: map
            mapping:
              name:
                type: str
                enum:
                - "{node_xname}"
              endpoint:
                type: str
                enum:
                - user-data
              last_epoch:
                type: int
                range:
                  min: 1 # If the epoch time is 0, then that means the endpoint wasn't really queried.

# Verify that there are no matches when using a prefix of the xname.
- name: Query endpoint-history with xname prefix
  request:
    url: "{bss_base_url}/boot/v1/endpoint-history"
    method: GET
    verify: !bool "{verify}"
    params:
      name: x1000
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          matching: all
          range:
            min: 0
            max: 0
          sequence:
          - type: map
            mapping:
              name:
                type: str
              endpoint:
                type: str
              last_epoch:
                type: int

- name: Remove test HSM EthernetInterfaces for the CT Test container
  request:
    url: "{hsm_base_url}/hsm/v2/Inventory/EthernetInterfaces/0efffffffffe"
    method: DELETE
    verify: !bool "{verify}"
  response:
    status_code: 200

- name: Remove test Bootparameter for compute node
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      hosts:
      - "{node_xname}"
  response:
    status_code: 200
